class MyCircularQueue {
    int front;
    int rear;
    int n, size;
    int[] queue;

    public MyCircularQueue(int k) {
        queue = new int[n = k];
        rear = -1;
    }
    
    public boolean enQueue(int value) {
        if(isFull()) return false;
        queue[rear = ++rear % n] = value;
        size++;
        return true;
    }
    
    public boolean deQueue() {
        if(isEmpty()) return false;
        front = (front + 1) % n;
        size--;
        return true;
    }
    
    public int Front() {
        if(isEmpty()) return -1;
        return queue[front];
    }
    
    public int Rear() {
        if(isEmpty()) return -1;
        return queue[rear];
    }
    
    public boolean isEmpty() {
        return size == 0;
    }
    
    public boolean isFull() {
        return size == n;
    }
}
